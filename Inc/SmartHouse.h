// Library for SmartHouse based on STM32 chip
// Ver 1.0
// Author Girfanov.Ayrat@yandex.ru

/*========== LIBRARY DESCRIPTION ==========
- Library contain global variables and functions according SmartHouse protocol
- Library use STM32F1xx_HAL_Driver
*/

#ifndef SmartHouse_H_
#define SmartHouse_H_
#include "stm32f1xx_hal.h"

/*========== GLOBAL VARABLES ==========*/

extern const uint8_t  id;
extern const char     ver[];
extern const char     name[];
extern uint8_t  address;        // адрес устройства в системе (по умолчанию 0xFF)
typedef struct {                // структура, содержащая дату и время
    uint8_t     day;            // число
    uint8_t     month;          // месяц
    uint16_t    year;           // год
    uint8_t     hour;           // часы (в 24-часовом формате)
    uint8_t     minute;         // минуты
    uint8_t     second;         // секунды
} rtc_t;
extern rtc_t    rtc;            // 
extern int16_t  pwr;            // напряжение питания на входе устройства в мВ
extern const uint8_t  meas_num; // 
extern const uint8_t  rele_num; // 
extern const uint8_t  act_num;  // 
extern const uint8_t  alrm_num; // 
typedef struct {                // таблица структур, содержащая данные измеряемых параметров
    char        name[9];        // строковое название измеряемого параметра (можно использовать кириллицу, 
                                // например "Гор.вода")
    char        unit[5];        // строковая запись единиц измерения (можно использовать кириллицу, например "л")
    int32_t     value;          // значение измеряемого параметра, умноженного на 1000. Например если измеренное
                                // значение 32,64 (л), то value = 32640. То есть чтобы получить измеренное значение
                                // в указанной unit размерности, нужно value/1000. Это сделано для того, чтобы не
                                // связываться с плавающей точкой.
} meas_t;
extern meas_t meas[];  
typedef enum {
    STATE_CONTROL = (1<<0),     // управляющее воздействие ("0" - реле выключено, "1" - реле включено)
    STATE_STATUS = (1<<1),      // обратная связь ("0" - ток обмотки реле отсутсвует, "1" - ток обмотки реле
                                // присутствует)
    STATE_SHORT = (1<<2),       // короткое замыкание обмотки реле ("0" - КЗ нет, "1" - было обнаружено КЗ). Данный
                                // бит устанавливается в "1" если ток обмотки реле превышает максимальное пороговое
                                // значениие в течение порогового времени, при этом управляющее воздействие реле
                                // выключается. Сброс данного бита происходит при следующей попыке включить реле.
    STATE_FALL = (1<<3)         // обрыв обмотки реле ("0" - обрыва нет, "1" - обнаружен обрыв обмотки реле). Данный
                                // бит устанавливается в "1" если ток обмотки реле не превысил минимального порогового
                                // значениия в течение порогового времени, при этом управляющее воздействие реле
                                // выключается. Сброс данного бита происходит при следующей попыке включить реле.
} state_st;
typedef struct {                // таблица структур, содержащая данные дискретно управляемых исполнительных устройств
    char        name[9];        // строковое название дискретно управляемого исполнительного устройства
                                // (можно использовать кириллицу, например "Полив")
    state_st    state;          // состояниие дискретно управляемого исполнительного устройства (см. rele_st)
} rele_t;
extern rele_t rele[];
typedef struct {                // таблица структур, содержащая данные плавно управляемых исполнительных устройств
    char        name[9];        // строковое название плавно управляемого исполнительного устройства
                                // (можно использовать кириллицу, например "Задвижка")
    char        unit[5];        // строковая запись единиц измерения (можно использовать кириллицу, например "л")
    int32_t     set_value;      // заданное значение плавно управляемого исполнительного устройства, умноженного на 1000
    int32_t     meas_value;     // измеренное значение плавно управляемого исполнительного устройства, умноженного на 1000
    state_st    state;           // состояниие плавно управляемого исполнительного устройства (см. act_st)
} act_t;
extern act_t act[];
typedef struct {                // структура, которая содержит время срабатывания будильника
        uint8_t     hour;       // часы (в 24-часовом формате)
        uint8_t     minute;     // минуты
        uint8_t     second;     // секунды
    } time_t;
typedef enum {
    STATE_ON = 1,
    STATE_OFF = 0
} alrm_st;
typedef struct {
    char        name[9];        // строковое название будильника (можно использовать кириллицу, например "Полив")
    time_t      time;           // время срабатывания будильника (ежедневно)
    alrm_st     state;          // состояние будильника
} alrm_t;
extern alrm_t alrm[];
/*========== FUNCTION PROTOTYPES ==========*/

void smart_init (void);


#endif /*SmartHouse*/
